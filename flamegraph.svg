<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="99"><g><title>6157365248 (1 samples, 1.01%)</title><rect x="0.0000%" y="389" width="1.0101%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="0.0000%" y="373" width="1.0101%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="0.0000%" y="357" width="1.0101%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="0.0000%" y="341" width="1.0101%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="0.0000%" y="325" width="1.0101%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 1.01%)</title><rect x="0.0000%" y="309" width="1.0101%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 1.01%)</title><rect x="0.0000%" y="293" width="1.0101%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 1.01%)</title><rect x="0.0000%" y="277" width="1.0101%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 1.01%)</title><rect x="0.0000%" y="261" width="1.0101%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 1.01%)</title><rect x="0.0000%" y="245" width="1.0101%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 1.01%)</title><rect x="0.0000%" y="229" width="1.0101%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 1.01%)</title><rect x="0.0000%" y="213" width="1.0101%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1 samples, 1.01%)</title><rect x="0.0000%" y="197" width="1.0101%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 1.01%)</title><rect x="0.0000%" y="181" width="1.0101%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 1.01%)</title><rect x="0.0000%" y="165" width="1.0101%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>kvs::server_async::KvServerAsync&lt;E&gt;::start::{{closure}}::{{closure}} (1 samples, 1.01%)</title><rect x="0.0000%" y="149" width="1.0101%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 1.01%)</title><rect x="0.0000%" y="133" width="1.0101%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (1 samples, 1.01%)</title><rect x="0.0000%" y="117" width="1.0101%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="0.0000%" y="101" width="1.0101%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="0.0000%" y="85" width="1.0101%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 1.01%)</title><rect x="1.0101%" y="181" width="1.0101%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="1.2601%" y="191.50"></text></g><g><title>__pthread_workloop_create (1 samples, 1.01%)</title><rect x="1.0101%" y="165" width="1.0101%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="1.2601%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 3.03%)</title><rect x="2.0202%" y="165" width="3.0303%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="3"/><text x="2.2702%" y="175.50">par..</text></g><g><title>__pthread_cond_wait (3 samples, 3.03%)</title><rect x="2.0202%" y="149" width="3.0303%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="3"/><text x="2.2702%" y="159.50">__p..</text></g><g><title>mio::poll::Poll::poll (4 samples, 4.04%)</title><rect x="5.0505%" y="133" width="4.0404%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="4"/><text x="5.3005%" y="143.50">mio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (9 samples, 9.09%)</title><rect x="1.0101%" y="197" width="9.0909%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="9"/><text x="1.2601%" y="207.50">tokio::runtim..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (8 samples, 8.08%)</title><rect x="2.0202%" y="181" width="8.0808%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="8"/><text x="2.2702%" y="191.50">tokio::runt..</text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 5.05%)</title><rect x="5.0505%" y="165" width="5.0505%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="5"/><text x="5.3005%" y="175.50">tokio:..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (5 samples, 5.05%)</title><rect x="5.0505%" y="149" width="5.0505%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="5"/><text x="5.3005%" y="159.50">tokio:..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 1.01%)</title><rect x="9.0909%" y="133" width="1.0101%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="1"/><text x="9.3409%" y="143.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 1.01%)</title><rect x="9.0909%" y="117" width="1.0101%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="9.3409%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 1.01%)</title><rect x="9.0909%" y="101" width="1.0101%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="9.3409%" y="111.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 1.01%)</title><rect x="9.0909%" y="85" width="1.0101%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="9.3409%" y="95.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (2 samples, 2.02%)</title><rect x="10.1010%" y="133" width="2.0202%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="2"/><text x="10.3510%" y="143.50">t..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (2 samples, 2.02%)</title><rect x="10.1010%" y="117" width="2.0202%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="2"/><text x="10.3510%" y="127.50">&lt;..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 2.02%)</title><rect x="10.1010%" y="101" width="2.0202%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="2"/><text x="10.3510%" y="111.50">&lt;..</text></g><g><title>6159511552 (12 samples, 12.12%)</title><rect x="1.0101%" y="389" width="12.1212%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="12"/><text x="1.2601%" y="399.50">6159511552</text></g><g><title>__pthread_joiner_wake (12 samples, 12.12%)</title><rect x="1.0101%" y="373" width="12.1212%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="12"/><text x="1.2601%" y="383.50">__pthread_joiner_w..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (12 samples, 12.12%)</title><rect x="1.0101%" y="357" width="12.1212%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="12"/><text x="1.2601%" y="367.50">std::sys::pal::uni..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (12 samples, 12.12%)</title><rect x="1.0101%" y="341" width="12.1212%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="12"/><text x="1.2601%" y="351.50">core::ops::functio..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (12 samples, 12.12%)</title><rect x="1.0101%" y="325" width="12.1212%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="12"/><text x="1.2601%" y="335.50">std::sys::backtrac..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (12 samples, 12.12%)</title><rect x="1.0101%" y="309" width="12.1212%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="12"/><text x="1.2601%" y="319.50">tokio::runtime::bl..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12 samples, 12.12%)</title><rect x="1.0101%" y="293" width="12.1212%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="12"/><text x="1.2601%" y="303.50">tokio::runtime::ta..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 12.12%)</title><rect x="1.0101%" y="277" width="12.1212%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="12"/><text x="1.2601%" y="287.50">tokio::runtime::ta..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 12.12%)</title><rect x="1.0101%" y="261" width="12.1212%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="12"/><text x="1.2601%" y="271.50">&lt;tokio::runtime::b..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (12 samples, 12.12%)</title><rect x="1.0101%" y="245" width="12.1212%" height="15" fill="rgb(206,96,30)" fg:x="1" fg:w="12"/><text x="1.2601%" y="255.50">tokio::runtime::sc..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (12 samples, 12.12%)</title><rect x="1.0101%" y="229" width="12.1212%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="12"/><text x="1.2601%" y="239.50">tokio::runtime::co..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (12 samples, 12.12%)</title><rect x="1.0101%" y="213" width="12.1212%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="12"/><text x="1.2601%" y="223.50">tokio::runtime::sc..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3 samples, 3.03%)</title><rect x="10.1010%" y="197" width="3.0303%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="3"/><text x="10.3510%" y="207.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 3.03%)</title><rect x="10.1010%" y="181" width="3.0303%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="3"/><text x="10.3510%" y="191.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 3.03%)</title><rect x="10.1010%" y="165" width="3.0303%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="3"/><text x="10.3510%" y="175.50">tok..</text></g><g><title>kvs::server_async::KvServerAsync&lt;E&gt;::start::{{closure}}::{{closure}} (3 samples, 3.03%)</title><rect x="10.1010%" y="149" width="3.0303%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="3"/><text x="10.3510%" y="159.50">kvs..</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 1.01%)</title><rect x="12.1212%" y="133" width="1.0101%" height="15" fill="rgb(247,123,22)" fg:x="12" fg:w="1"/><text x="12.3712%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (1 samples, 1.01%)</title><rect x="12.1212%" y="117" width="1.0101%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1"/><text x="12.3712%" y="127.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="12.1212%" y="101" width="1.0101%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="12.3712%" y="111.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="12.1212%" y="85" width="1.0101%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="12.3712%" y="95.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 1.01%)</title><rect x="13.1313%" y="165" width="1.0101%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="1"/><text x="13.3813%" y="175.50"></text></g><g><title>__pthread_cond_wait (1 samples, 1.01%)</title><rect x="13.1313%" y="149" width="1.0101%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="1"/><text x="13.3813%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (4 samples, 4.04%)</title><rect x="13.1313%" y="197" width="4.0404%" height="15" fill="rgb(209,12,38)" fg:x="13" fg:w="4"/><text x="13.3813%" y="207.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (4 samples, 4.04%)</title><rect x="13.1313%" y="181" width="4.0404%" height="15" fill="rgb(227,1,9)" fg:x="13" fg:w="4"/><text x="13.3813%" y="191.50">toki..</text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 3.03%)</title><rect x="14.1414%" y="165" width="3.0303%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="3"/><text x="14.3914%" y="175.50">tok..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (3 samples, 3.03%)</title><rect x="14.1414%" y="149" width="3.0303%" height="15" fill="rgb(221,10,30)" fg:x="14" fg:w="3"/><text x="14.3914%" y="159.50">tok..</text></g><g><title>mio::poll::Poll::poll (3 samples, 3.03%)</title><rect x="14.1414%" y="133" width="3.0303%" height="15" fill="rgb(210,229,1)" fg:x="14" fg:w="3"/><text x="14.3914%" y="143.50">mio..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 1.01%)</title><rect x="17.1717%" y="181" width="1.0101%" height="15" fill="rgb(222,148,37)" fg:x="17" fg:w="1"/><text x="17.4217%" y="191.50"></text></g><g><title>__pthread_workloop_create (1 samples, 1.01%)</title><rect x="17.1717%" y="165" width="1.0101%" height="15" fill="rgb(234,67,33)" fg:x="17" fg:w="1"/><text x="17.4217%" y="175.50"></text></g><g><title>bench::parallel_get_bench_async::{{closure}}::{{closure}}::{{closure}} (2 samples, 2.02%)</title><rect x="18.1818%" y="149" width="2.0202%" height="15" fill="rgb(247,98,35)" fg:x="18" fg:w="2"/><text x="18.4318%" y="159.50">b..</text></g><g><title>tokio::net::tcp::stream::TcpStream::new (2 samples, 2.02%)</title><rect x="18.1818%" y="133" width="2.0202%" height="15" fill="rgb(247,138,52)" fg:x="18" fg:w="2"/><text x="18.4318%" y="143.50">t..</text></g><g><title>tokio::runtime::io::registration::Registration::new_with_interest_and_handle (2 samples, 2.02%)</title><rect x="18.1818%" y="117" width="2.0202%" height="15" fill="rgb(213,79,30)" fg:x="18" fg:w="2"/><text x="18.4318%" y="127.50">t..</text></g><g><title>tokio::runtime::io::driver::Handle::add_source (2 samples, 2.02%)</title><rect x="18.1818%" y="101" width="2.0202%" height="15" fill="rgb(246,177,23)" fg:x="18" fg:w="2"/><text x="18.4318%" y="111.50">t..</text></g><g><title>mio::sys::unix::selector::Selector::register (2 samples, 2.02%)</title><rect x="18.1818%" y="85" width="2.0202%" height="15" fill="rgb(230,62,27)" fg:x="18" fg:w="2"/><text x="18.4318%" y="95.50">m..</text></g><g><title>kvs::engines::kvs_async::KvWriter::write::{{closure}} (1 samples, 1.01%)</title><rect x="21.2121%" y="133" width="1.0101%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="1"/><text x="21.4621%" y="143.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 1.01%)</title><rect x="21.2121%" y="117" width="1.0101%" height="15" fill="rgb(244,35,45)" fg:x="21" fg:w="1"/><text x="21.4621%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 1.01%)</title><rect x="21.2121%" y="101" width="1.0101%" height="15" fill="rgb(251,115,12)" fg:x="21" fg:w="1"/><text x="21.4621%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1 samples, 1.01%)</title><rect x="21.2121%" y="85" width="1.0101%" height="15" fill="rgb(240,54,50)" fg:x="21" fg:w="1"/><text x="21.4621%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 1.01%)</title><rect x="21.2121%" y="69" width="1.0101%" height="15" fill="rgb(233,84,52)" fg:x="21" fg:w="1"/><text x="21.4621%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 1.01%)</title><rect x="21.2121%" y="53" width="1.0101%" height="15" fill="rgb(207,117,47)" fg:x="21" fg:w="1"/><text x="21.4621%" y="63.50"></text></g><g><title>__pthread_workloop_create (1 samples, 1.01%)</title><rect x="21.2121%" y="37" width="1.0101%" height="15" fill="rgb(249,43,39)" fg:x="21" fg:w="1"/><text x="21.4621%" y="47.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 1.01%)</title><rect x="22.2222%" y="133" width="1.0101%" height="15" fill="rgb(209,38,44)" fg:x="22" fg:w="1"/><text x="22.4722%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="22.2222%" y="117" width="1.0101%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="1"/><text x="22.4722%" y="127.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="22.2222%" y="101" width="1.0101%" height="15" fill="rgb(242,79,21)" fg:x="22" fg:w="1"/><text x="22.4722%" y="111.50"></text></g><g><title>6161657856 (11 samples, 11.11%)</title><rect x="13.1313%" y="389" width="11.1111%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="11"/><text x="13.3813%" y="399.50">6161657856</text></g><g><title>__pthread_joiner_wake (11 samples, 11.11%)</title><rect x="13.1313%" y="373" width="11.1111%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="11"/><text x="13.3813%" y="383.50">__pthread_joiner..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (11 samples, 11.11%)</title><rect x="13.1313%" y="357" width="11.1111%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="11"/><text x="13.3813%" y="367.50">std::sys::pal::u..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (11 samples, 11.11%)</title><rect x="13.1313%" y="341" width="11.1111%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="11"/><text x="13.3813%" y="351.50">core::ops::funct..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (11 samples, 11.11%)</title><rect x="13.1313%" y="325" width="11.1111%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="11"/><text x="13.3813%" y="335.50">std::sys::backtr..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (11 samples, 11.11%)</title><rect x="13.1313%" y="309" width="11.1111%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="11"/><text x="13.3813%" y="319.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (11 samples, 11.11%)</title><rect x="13.1313%" y="293" width="11.1111%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="11"/><text x="13.3813%" y="303.50">tokio::runtime::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (11 samples, 11.11%)</title><rect x="13.1313%" y="277" width="11.1111%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="11"/><text x="13.3813%" y="287.50">tokio::runtime::..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 11.11%)</title><rect x="13.1313%" y="261" width="11.1111%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="11"/><text x="13.3813%" y="271.50">&lt;tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (11 samples, 11.11%)</title><rect x="13.1313%" y="245" width="11.1111%" height="15" fill="rgb(235,124,12)" fg:x="13" fg:w="11"/><text x="13.3813%" y="255.50">tokio::runtime::..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (11 samples, 11.11%)</title><rect x="13.1313%" y="229" width="11.1111%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="11"/><text x="13.3813%" y="239.50">tokio::runtime::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (11 samples, 11.11%)</title><rect x="13.1313%" y="213" width="11.1111%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="11"/><text x="13.3813%" y="223.50">tokio::runtime::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (7 samples, 7.07%)</title><rect x="17.1717%" y="197" width="7.0707%" height="15" fill="rgb(242,216,29)" fg:x="17" fg:w="7"/><text x="17.4217%" y="207.50">tokio::ru..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6 samples, 6.06%)</title><rect x="18.1818%" y="181" width="6.0606%" height="15" fill="rgb(230,116,27)" fg:x="18" fg:w="6"/><text x="18.4318%" y="191.50">tokio::r..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6 samples, 6.06%)</title><rect x="18.1818%" y="165" width="6.0606%" height="15" fill="rgb(228,99,48)" fg:x="18" fg:w="6"/><text x="18.4318%" y="175.50">tokio::r..</text></g><g><title>kvs::server_async::KvServerAsync&lt;E&gt;::start::{{closure}}::{{closure}} (4 samples, 4.04%)</title><rect x="20.2020%" y="149" width="4.0404%" height="15" fill="rgb(253,11,6)" fg:x="20" fg:w="4"/><text x="20.4520%" y="159.50">kvs:..</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 1.01%)</title><rect x="23.2323%" y="133" width="1.0101%" height="15" fill="rgb(247,143,39)" fg:x="23" fg:w="1"/><text x="23.4823%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (1 samples, 1.01%)</title><rect x="23.2323%" y="117" width="1.0101%" height="15" fill="rgb(236,97,10)" fg:x="23" fg:w="1"/><text x="23.4823%" y="127.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="23.2323%" y="101" width="1.0101%" height="15" fill="rgb(233,208,19)" fg:x="23" fg:w="1"/><text x="23.4823%" y="111.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="23.2323%" y="85" width="1.0101%" height="15" fill="rgb(216,164,2)" fg:x="23" fg:w="1"/><text x="23.4823%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (2 samples, 2.02%)</title><rect x="24.2424%" y="197" width="2.0202%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="2"/><text x="24.4924%" y="207.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (2 samples, 2.02%)</title><rect x="24.2424%" y="181" width="2.0202%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="2"/><text x="24.4924%" y="191.50">t..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 2.02%)</title><rect x="24.2424%" y="165" width="2.0202%" height="15" fill="rgb(242,107,0)" fg:x="24" fg:w="2"/><text x="24.4924%" y="175.50">p..</text></g><g><title>__pthread_cond_wait (2 samples, 2.02%)</title><rect x="24.2424%" y="149" width="2.0202%" height="15" fill="rgb(251,28,31)" fg:x="24" fg:w="2"/><text x="24.4924%" y="159.50">_..</text></g><g><title>tokio::runtime::io::driver::Handle::deregister_source (1 samples, 1.01%)</title><rect x="26.2626%" y="133" width="1.0101%" height="15" fill="rgb(233,223,10)" fg:x="26" fg:w="1"/><text x="26.5126%" y="143.50"></text></g><g><title>mio::sys::unix::selector::Selector::deregister (1 samples, 1.01%)</title><rect x="26.2626%" y="117" width="1.0101%" height="15" fill="rgb(215,21,27)" fg:x="26" fg:w="1"/><text x="26.5126%" y="127.50"></text></g><g><title>6163804160 (4 samples, 4.04%)</title><rect x="24.2424%" y="389" width="4.0404%" height="15" fill="rgb(232,23,21)" fg:x="24" fg:w="4"/><text x="24.4924%" y="399.50">6163..</text></g><g><title>__pthread_joiner_wake (4 samples, 4.04%)</title><rect x="24.2424%" y="373" width="4.0404%" height="15" fill="rgb(244,5,23)" fg:x="24" fg:w="4"/><text x="24.4924%" y="383.50">__pt..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 4.04%)</title><rect x="24.2424%" y="357" width="4.0404%" height="15" fill="rgb(226,81,46)" fg:x="24" fg:w="4"/><text x="24.4924%" y="367.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 4.04%)</title><rect x="24.2424%" y="341" width="4.0404%" height="15" fill="rgb(247,70,30)" fg:x="24" fg:w="4"/><text x="24.4924%" y="351.50">core..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (4 samples, 4.04%)</title><rect x="24.2424%" y="325" width="4.0404%" height="15" fill="rgb(212,68,19)" fg:x="24" fg:w="4"/><text x="24.4924%" y="335.50">std:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (4 samples, 4.04%)</title><rect x="24.2424%" y="309" width="4.0404%" height="15" fill="rgb(240,187,13)" fg:x="24" fg:w="4"/><text x="24.4924%" y="319.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 4.04%)</title><rect x="24.2424%" y="293" width="4.0404%" height="15" fill="rgb(223,113,26)" fg:x="24" fg:w="4"/><text x="24.4924%" y="303.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 4.04%)</title><rect x="24.2424%" y="277" width="4.0404%" height="15" fill="rgb(206,192,2)" fg:x="24" fg:w="4"/><text x="24.4924%" y="287.50">toki..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 4.04%)</title><rect x="24.2424%" y="261" width="4.0404%" height="15" fill="rgb(241,108,4)" fg:x="24" fg:w="4"/><text x="24.4924%" y="271.50">&lt;tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (4 samples, 4.04%)</title><rect x="24.2424%" y="245" width="4.0404%" height="15" fill="rgb(247,173,49)" fg:x="24" fg:w="4"/><text x="24.4924%" y="255.50">toki..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (4 samples, 4.04%)</title><rect x="24.2424%" y="229" width="4.0404%" height="15" fill="rgb(224,114,35)" fg:x="24" fg:w="4"/><text x="24.4924%" y="239.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (4 samples, 4.04%)</title><rect x="24.2424%" y="213" width="4.0404%" height="15" fill="rgb(245,159,27)" fg:x="24" fg:w="4"/><text x="24.4924%" y="223.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (2 samples, 2.02%)</title><rect x="26.2626%" y="197" width="2.0202%" height="15" fill="rgb(245,172,44)" fg:x="26" fg:w="2"/><text x="26.5126%" y="207.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 2.02%)</title><rect x="26.2626%" y="181" width="2.0202%" height="15" fill="rgb(236,23,11)" fg:x="26" fg:w="2"/><text x="26.5126%" y="191.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 2.02%)</title><rect x="26.2626%" y="165" width="2.0202%" height="15" fill="rgb(205,117,38)" fg:x="26" fg:w="2"/><text x="26.5126%" y="175.50">t..</text></g><g><title>kvs::server_async::KvServerAsync&lt;E&gt;::start::{{closure}}::{{closure}} (2 samples, 2.02%)</title><rect x="26.2626%" y="149" width="2.0202%" height="15" fill="rgb(237,72,25)" fg:x="26" fg:w="2"/><text x="26.5126%" y="159.50">k..</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 1.01%)</title><rect x="27.2727%" y="133" width="1.0101%" height="15" fill="rgb(244,70,9)" fg:x="27" fg:w="1"/><text x="27.5227%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (1 samples, 1.01%)</title><rect x="27.2727%" y="117" width="1.0101%" height="15" fill="rgb(217,125,39)" fg:x="27" fg:w="1"/><text x="27.5227%" y="127.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="27.2727%" y="101" width="1.0101%" height="15" fill="rgb(235,36,10)" fg:x="27" fg:w="1"/><text x="27.5227%" y="111.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="27.2727%" y="85" width="1.0101%" height="15" fill="rgb(251,123,47)" fg:x="27" fg:w="1"/><text x="27.5227%" y="95.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 2.02%)</title><rect x="28.2828%" y="165" width="2.0202%" height="15" fill="rgb(221,13,13)" fg:x="28" fg:w="2"/><text x="28.5328%" y="175.50">p..</text></g><g><title>__pthread_cond_wait (2 samples, 2.02%)</title><rect x="28.2828%" y="149" width="2.0202%" height="15" fill="rgb(238,131,9)" fg:x="28" fg:w="2"/><text x="28.5328%" y="159.50">_..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 3.03%)</title><rect x="28.2828%" y="197" width="3.0303%" height="15" fill="rgb(211,50,8)" fg:x="28" fg:w="3"/><text x="28.5328%" y="207.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (3 samples, 3.03%)</title><rect x="28.2828%" y="181" width="3.0303%" height="15" fill="rgb(245,182,24)" fg:x="28" fg:w="3"/><text x="28.5328%" y="191.50">tok..</text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 1.01%)</title><rect x="30.3030%" y="165" width="1.0101%" height="15" fill="rgb(242,14,37)" fg:x="30" fg:w="1"/><text x="30.5530%" y="175.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 1.01%)</title><rect x="30.3030%" y="149" width="1.0101%" height="15" fill="rgb(246,228,12)" fg:x="30" fg:w="1"/><text x="30.5530%" y="159.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 1.01%)</title><rect x="30.3030%" y="133" width="1.0101%" height="15" fill="rgb(213,55,15)" fg:x="30" fg:w="1"/><text x="30.5530%" y="143.50"></text></g><g><title>bench::parallel_get_bench_async::{{closure}}::{{closure}}::{{closure}} (1 samples, 1.01%)</title><rect x="31.3131%" y="149" width="1.0101%" height="15" fill="rgb(209,9,3)" fg:x="31" fg:w="1"/><text x="31.5631%" y="159.50"></text></g><g><title>tokio::task::spawn::spawn (1 samples, 1.01%)</title><rect x="31.3131%" y="133" width="1.0101%" height="15" fill="rgb(230,59,30)" fg:x="31" fg:w="1"/><text x="31.5631%" y="143.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (1 samples, 1.01%)</title><rect x="31.3131%" y="117" width="1.0101%" height="15" fill="rgb(209,121,21)" fg:x="31" fg:w="1"/><text x="31.5631%" y="127.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (1 samples, 1.01%)</title><rect x="31.3131%" y="101" width="1.0101%" height="15" fill="rgb(220,109,13)" fg:x="31" fg:w="1"/><text x="31.5631%" y="111.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 1.01%)</title><rect x="31.3131%" y="85" width="1.0101%" height="15" fill="rgb(232,18,1)" fg:x="31" fg:w="1"/><text x="31.5631%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 1.01%)</title><rect x="31.3131%" y="69" width="1.0101%" height="15" fill="rgb(215,41,42)" fg:x="31" fg:w="1"/><text x="31.5631%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 1.01%)</title><rect x="31.3131%" y="53" width="1.0101%" height="15" fill="rgb(224,123,36)" fg:x="31" fg:w="1"/><text x="31.5631%" y="63.50"></text></g><g><title>__pthread_rwlock_lock_slow (1 samples, 1.01%)</title><rect x="31.3131%" y="37" width="1.0101%" height="15" fill="rgb(240,125,3)" fg:x="31" fg:w="1"/><text x="31.5631%" y="47.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 1.01%)</title><rect x="34.3434%" y="117" width="1.0101%" height="15" fill="rgb(205,98,50)" fg:x="34" fg:w="1"/><text x="34.5934%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 1.01%)</title><rect x="34.3434%" y="101" width="1.0101%" height="15" fill="rgb(205,185,37)" fg:x="34" fg:w="1"/><text x="34.5934%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 1.01%)</title><rect x="34.3434%" y="85" width="1.0101%" height="15" fill="rgb(238,207,15)" fg:x="34" fg:w="1"/><text x="34.5934%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 1.01%)</title><rect x="34.3434%" y="69" width="1.0101%" height="15" fill="rgb(213,199,42)" fg:x="34" fg:w="1"/><text x="34.5934%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 1.01%)</title><rect x="34.3434%" y="53" width="1.0101%" height="15" fill="rgb(235,201,11)" fg:x="34" fg:w="1"/><text x="34.5934%" y="63.50"></text></g><g><title>__pthread_workloop_create (1 samples, 1.01%)</title><rect x="34.3434%" y="37" width="1.0101%" height="15" fill="rgb(207,46,11)" fg:x="34" fg:w="1"/><text x="34.5934%" y="47.50"></text></g><g><title>6165950464 (8 samples, 8.08%)</title><rect x="28.2828%" y="389" width="8.0808%" height="15" fill="rgb(241,35,35)" fg:x="28" fg:w="8"/><text x="28.5328%" y="399.50">6165950464</text></g><g><title>__pthread_joiner_wake (8 samples, 8.08%)</title><rect x="28.2828%" y="373" width="8.0808%" height="15" fill="rgb(243,32,47)" fg:x="28" fg:w="8"/><text x="28.5328%" y="383.50">__pthread_j..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (8 samples, 8.08%)</title><rect x="28.2828%" y="357" width="8.0808%" height="15" fill="rgb(247,202,23)" fg:x="28" fg:w="8"/><text x="28.5328%" y="367.50">std::sys::p..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8 samples, 8.08%)</title><rect x="28.2828%" y="341" width="8.0808%" height="15" fill="rgb(219,102,11)" fg:x="28" fg:w="8"/><text x="28.5328%" y="351.50">core::ops::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8 samples, 8.08%)</title><rect x="28.2828%" y="325" width="8.0808%" height="15" fill="rgb(243,110,44)" fg:x="28" fg:w="8"/><text x="28.5328%" y="335.50">std::sys::b..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (8 samples, 8.08%)</title><rect x="28.2828%" y="309" width="8.0808%" height="15" fill="rgb(222,74,54)" fg:x="28" fg:w="8"/><text x="28.5328%" y="319.50">tokio::runt..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (8 samples, 8.08%)</title><rect x="28.2828%" y="293" width="8.0808%" height="15" fill="rgb(216,99,12)" fg:x="28" fg:w="8"/><text x="28.5328%" y="303.50">tokio::runt..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8 samples, 8.08%)</title><rect x="28.2828%" y="277" width="8.0808%" height="15" fill="rgb(226,22,26)" fg:x="28" fg:w="8"/><text x="28.5328%" y="287.50">tokio::runt..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 8.08%)</title><rect x="28.2828%" y="261" width="8.0808%" height="15" fill="rgb(217,163,10)" fg:x="28" fg:w="8"/><text x="28.5328%" y="271.50">&lt;tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (8 samples, 8.08%)</title><rect x="28.2828%" y="245" width="8.0808%" height="15" fill="rgb(213,25,53)" fg:x="28" fg:w="8"/><text x="28.5328%" y="255.50">tokio::runt..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (8 samples, 8.08%)</title><rect x="28.2828%" y="229" width="8.0808%" height="15" fill="rgb(252,105,26)" fg:x="28" fg:w="8"/><text x="28.5328%" y="239.50">tokio::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (8 samples, 8.08%)</title><rect x="28.2828%" y="213" width="8.0808%" height="15" fill="rgb(220,39,43)" fg:x="28" fg:w="8"/><text x="28.5328%" y="223.50">tokio::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (5 samples, 5.05%)</title><rect x="31.3131%" y="197" width="5.0505%" height="15" fill="rgb(229,68,48)" fg:x="31" fg:w="5"/><text x="31.5631%" y="207.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5 samples, 5.05%)</title><rect x="31.3131%" y="181" width="5.0505%" height="15" fill="rgb(252,8,32)" fg:x="31" fg:w="5"/><text x="31.5631%" y="191.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5 samples, 5.05%)</title><rect x="31.3131%" y="165" width="5.0505%" height="15" fill="rgb(223,20,43)" fg:x="31" fg:w="5"/><text x="31.5631%" y="175.50">tokio:..</text></g><g><title>kvs::server_async::KvServerAsync&lt;E&gt;::start::{{closure}}::{{closure}} (4 samples, 4.04%)</title><rect x="32.3232%" y="149" width="4.0404%" height="15" fill="rgb(229,81,49)" fg:x="32" fg:w="4"/><text x="32.5732%" y="159.50">kvs:..</text></g><g><title>kvs::engines::kvs_async::KvReader::read::{{closure}} (2 samples, 2.02%)</title><rect x="34.3434%" y="133" width="2.0202%" height="15" fill="rgb(236,28,36)" fg:x="34" fg:w="2"/><text x="34.5934%" y="143.50">k..</text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (1 samples, 1.01%)</title><rect x="35.3535%" y="117" width="1.0101%" height="15" fill="rgb(249,185,26)" fg:x="35" fg:w="1"/><text x="35.6035%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (1 samples, 1.01%)</title><rect x="35.3535%" y="101" width="1.0101%" height="15" fill="rgb(249,174,33)" fg:x="35" fg:w="1"/><text x="35.6035%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 1.01%)</title><rect x="35.3535%" y="85" width="1.0101%" height="15" fill="rgb(233,201,37)" fg:x="35" fg:w="1"/><text x="35.6035%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 1.01%)</title><rect x="35.3535%" y="69" width="1.0101%" height="15" fill="rgb(221,78,26)" fg:x="35" fg:w="1"/><text x="35.6035%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 1.01%)</title><rect x="35.3535%" y="53" width="1.0101%" height="15" fill="rgb(250,127,30)" fg:x="35" fg:w="1"/><text x="35.6035%" y="63.50"></text></g><g><title>__pthread_workloop_create (1 samples, 1.01%)</title><rect x="35.3535%" y="37" width="1.0101%" height="15" fill="rgb(230,49,44)" fg:x="35" fg:w="1"/><text x="35.6035%" y="47.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 1.01%)</title><rect x="36.3636%" y="165" width="1.0101%" height="15" fill="rgb(229,67,23)" fg:x="36" fg:w="1"/><text x="36.6136%" y="175.50"></text></g><g><title>__pthread_cond_wait (1 samples, 1.01%)</title><rect x="36.3636%" y="149" width="1.0101%" height="15" fill="rgb(249,83,47)" fg:x="36" fg:w="1"/><text x="36.6136%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (6 samples, 6.06%)</title><rect x="36.3636%" y="197" width="6.0606%" height="15" fill="rgb(215,43,3)" fg:x="36" fg:w="6"/><text x="36.6136%" y="207.50">tokio::r..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (6 samples, 6.06%)</title><rect x="36.3636%" y="181" width="6.0606%" height="15" fill="rgb(238,154,13)" fg:x="36" fg:w="6"/><text x="36.6136%" y="191.50">tokio::r..</text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 5.05%)</title><rect x="37.3737%" y="165" width="5.0505%" height="15" fill="rgb(219,56,2)" fg:x="37" fg:w="5"/><text x="37.6237%" y="175.50">tokio:..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (5 samples, 5.05%)</title><rect x="37.3737%" y="149" width="5.0505%" height="15" fill="rgb(233,0,4)" fg:x="37" fg:w="5"/><text x="37.6237%" y="159.50">tokio:..</text></g><g><title>mio::poll::Poll::poll (5 samples, 5.05%)</title><rect x="37.3737%" y="133" width="5.0505%" height="15" fill="rgb(235,30,7)" fg:x="37" fg:w="5"/><text x="37.6237%" y="143.50">mio::p..</text></g><g><title>mio::net::tcp::listener::TcpListener::accept (1 samples, 1.01%)</title><rect x="42.4242%" y="133" width="1.0101%" height="15" fill="rgb(250,79,13)" fg:x="42" fg:w="1"/><text x="42.6742%" y="143.50"></text></g><g><title>mio::sys::unix::tcp::accept (1 samples, 1.01%)</title><rect x="42.4242%" y="117" width="1.0101%" height="15" fill="rgb(211,146,34)" fg:x="42" fg:w="1"/><text x="42.6742%" y="127.50"></text></g><g><title>bench::parallel_get_bench_async::{{closure}}::{{closure}}::{{closure}} (2 samples, 2.02%)</title><rect x="42.4242%" y="149" width="2.0202%" height="15" fill="rgb(228,22,38)" fg:x="42" fg:w="2"/><text x="42.6742%" y="159.50">b..</text></g><g><title>tokio::net::tcp::stream::TcpStream::new (1 samples, 1.01%)</title><rect x="43.4343%" y="133" width="1.0101%" height="15" fill="rgb(235,168,5)" fg:x="43" fg:w="1"/><text x="43.6843%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::new_with_interest_and_handle (1 samples, 1.01%)</title><rect x="43.4343%" y="117" width="1.0101%" height="15" fill="rgb(221,155,16)" fg:x="43" fg:w="1"/><text x="43.6843%" y="127.50"></text></g><g><title>tokio::runtime::io::driver::Handle::add_source (1 samples, 1.01%)</title><rect x="43.4343%" y="101" width="1.0101%" height="15" fill="rgb(215,215,53)" fg:x="43" fg:w="1"/><text x="43.6843%" y="111.50"></text></g><g><title>mio::sys::unix::selector::Selector::register (1 samples, 1.01%)</title><rect x="43.4343%" y="85" width="1.0101%" height="15" fill="rgb(223,4,10)" fg:x="43" fg:w="1"/><text x="43.6843%" y="95.50"></text></g><g><title>6168096768 (9 samples, 9.09%)</title><rect x="36.3636%" y="389" width="9.0909%" height="15" fill="rgb(234,103,6)" fg:x="36" fg:w="9"/><text x="36.6136%" y="399.50">6168096768</text></g><g><title>__pthread_joiner_wake (9 samples, 9.09%)</title><rect x="36.3636%" y="373" width="9.0909%" height="15" fill="rgb(227,97,0)" fg:x="36" fg:w="9"/><text x="36.6136%" y="383.50">__pthread_joi..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (9 samples, 9.09%)</title><rect x="36.3636%" y="357" width="9.0909%" height="15" fill="rgb(234,150,53)" fg:x="36" fg:w="9"/><text x="36.6136%" y="367.50">std::sys::pal..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (9 samples, 9.09%)</title><rect x="36.3636%" y="341" width="9.0909%" height="15" fill="rgb(228,201,54)" fg:x="36" fg:w="9"/><text x="36.6136%" y="351.50">core::ops::fu..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (9 samples, 9.09%)</title><rect x="36.3636%" y="325" width="9.0909%" height="15" fill="rgb(222,22,37)" fg:x="36" fg:w="9"/><text x="36.6136%" y="335.50">std::sys::bac..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (9 samples, 9.09%)</title><rect x="36.3636%" y="309" width="9.0909%" height="15" fill="rgb(237,53,32)" fg:x="36" fg:w="9"/><text x="36.6136%" y="319.50">tokio::runtim..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (9 samples, 9.09%)</title><rect x="36.3636%" y="293" width="9.0909%" height="15" fill="rgb(233,25,53)" fg:x="36" fg:w="9"/><text x="36.6136%" y="303.50">tokio::runtim..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (9 samples, 9.09%)</title><rect x="36.3636%" y="277" width="9.0909%" height="15" fill="rgb(210,40,34)" fg:x="36" fg:w="9"/><text x="36.6136%" y="287.50">tokio::runtim..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 9.09%)</title><rect x="36.3636%" y="261" width="9.0909%" height="15" fill="rgb(241,220,44)" fg:x="36" fg:w="9"/><text x="36.6136%" y="271.50">&lt;tokio::runti..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (9 samples, 9.09%)</title><rect x="36.3636%" y="245" width="9.0909%" height="15" fill="rgb(235,28,35)" fg:x="36" fg:w="9"/><text x="36.6136%" y="255.50">tokio::runtim..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (9 samples, 9.09%)</title><rect x="36.3636%" y="229" width="9.0909%" height="15" fill="rgb(210,56,17)" fg:x="36" fg:w="9"/><text x="36.6136%" y="239.50">tokio::runtim..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (9 samples, 9.09%)</title><rect x="36.3636%" y="213" width="9.0909%" height="15" fill="rgb(224,130,29)" fg:x="36" fg:w="9"/><text x="36.6136%" y="223.50">tokio::runtim..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3 samples, 3.03%)</title><rect x="42.4242%" y="197" width="3.0303%" height="15" fill="rgb(235,212,8)" fg:x="42" fg:w="3"/><text x="42.6742%" y="207.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 3.03%)</title><rect x="42.4242%" y="181" width="3.0303%" height="15" fill="rgb(223,33,50)" fg:x="42" fg:w="3"/><text x="42.6742%" y="191.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 3.03%)</title><rect x="42.4242%" y="165" width="3.0303%" height="15" fill="rgb(219,149,13)" fg:x="42" fg:w="3"/><text x="42.6742%" y="175.50">tok..</text></g><g><title>kvs::server_async::KvServerAsync&lt;E&gt;::start::{{closure}}::{{closure}} (1 samples, 1.01%)</title><rect x="44.4444%" y="149" width="1.0101%" height="15" fill="rgb(250,156,29)" fg:x="44" fg:w="1"/><text x="44.6944%" y="159.50"></text></g><g><title>kvs::engines::kvs_async::KvReader::read::{{closure}} (1 samples, 1.01%)</title><rect x="44.4444%" y="133" width="1.0101%" height="15" fill="rgb(216,193,19)" fg:x="44" fg:w="1"/><text x="44.6944%" y="143.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (1 samples, 1.01%)</title><rect x="44.4444%" y="117" width="1.0101%" height="15" fill="rgb(216,135,14)" fg:x="44" fg:w="1"/><text x="44.6944%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (1 samples, 1.01%)</title><rect x="44.4444%" y="101" width="1.0101%" height="15" fill="rgb(241,47,5)" fg:x="44" fg:w="1"/><text x="44.6944%" y="111.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1 samples, 1.01%)</title><rect x="44.4444%" y="85" width="1.0101%" height="15" fill="rgb(233,42,35)" fg:x="44" fg:w="1"/><text x="44.6944%" y="95.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 1.01%)</title><rect x="44.4444%" y="69" width="1.0101%" height="15" fill="rgb(231,13,6)" fg:x="44" fg:w="1"/><text x="44.6944%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 1.01%)</title><rect x="44.4444%" y="53" width="1.0101%" height="15" fill="rgb(207,181,40)" fg:x="44" fg:w="1"/><text x="44.6944%" y="63.50"></text></g><g><title>__pthread_workloop_create (1 samples, 1.01%)</title><rect x="44.4444%" y="37" width="1.0101%" height="15" fill="rgb(254,173,49)" fg:x="44" fg:w="1"/><text x="44.6944%" y="47.50"></text></g><g><title>6170243072 (1 samples, 1.01%)</title><rect x="45.4545%" y="389" width="1.0101%" height="15" fill="rgb(221,1,38)" fg:x="45" fg:w="1"/><text x="45.7045%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="45.4545%" y="373" width="1.0101%" height="15" fill="rgb(206,124,46)" fg:x="45" fg:w="1"/><text x="45.7045%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="45.4545%" y="357" width="1.0101%" height="15" fill="rgb(249,21,11)" fg:x="45" fg:w="1"/><text x="45.7045%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="45.4545%" y="341" width="1.0101%" height="15" fill="rgb(222,201,40)" fg:x="45" fg:w="1"/><text x="45.7045%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="45.4545%" y="325" width="1.0101%" height="15" fill="rgb(235,61,29)" fg:x="45" fg:w="1"/><text x="45.7045%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="45.4545%" y="309" width="1.0101%" height="15" fill="rgb(219,207,3)" fg:x="45" fg:w="1"/><text x="45.7045%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="45.4545%" y="293" width="1.0101%" height="15" fill="rgb(222,56,46)" fg:x="45" fg:w="1"/><text x="45.7045%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="45.4545%" y="277" width="1.0101%" height="15" fill="rgb(239,76,54)" fg:x="45" fg:w="1"/><text x="45.7045%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="45.4545%" y="261" width="1.0101%" height="15" fill="rgb(231,124,27)" fg:x="45" fg:w="1"/><text x="45.7045%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="45.4545%" y="245" width="1.0101%" height="15" fill="rgb(249,195,6)" fg:x="45" fg:w="1"/><text x="45.7045%" y="255.50"></text></g><g><title>std::sys::pal::unix::net::Socket::new_raw (1 samples, 1.01%)</title><rect x="45.4545%" y="229" width="1.0101%" height="15" fill="rgb(237,174,47)" fg:x="45" fg:w="1"/><text x="45.7045%" y="239.50"></text></g><g><title>6178828288 (1 samples, 1.01%)</title><rect x="46.4646%" y="389" width="1.0101%" height="15" fill="rgb(206,201,31)" fg:x="46" fg:w="1"/><text x="46.7146%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="46.4646%" y="373" width="1.0101%" height="15" fill="rgb(231,57,52)" fg:x="46" fg:w="1"/><text x="46.7146%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="46.4646%" y="357" width="1.0101%" height="15" fill="rgb(248,177,22)" fg:x="46" fg:w="1"/><text x="46.7146%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="46.4646%" y="341" width="1.0101%" height="15" fill="rgb(215,211,37)" fg:x="46" fg:w="1"/><text x="46.7146%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="46.4646%" y="325" width="1.0101%" height="15" fill="rgb(241,128,51)" fg:x="46" fg:w="1"/><text x="46.7146%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="46.4646%" y="309" width="1.0101%" height="15" fill="rgb(227,165,31)" fg:x="46" fg:w="1"/><text x="46.7146%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="46.4646%" y="293" width="1.0101%" height="15" fill="rgb(228,167,24)" fg:x="46" fg:w="1"/><text x="46.7146%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="46.4646%" y="277" width="1.0101%" height="15" fill="rgb(228,143,12)" fg:x="46" fg:w="1"/><text x="46.7146%" y="287.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="46.4646%" y="261" width="1.0101%" height="15" fill="rgb(249,149,8)" fg:x="46" fg:w="1"/><text x="46.7146%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="46.4646%" y="245" width="1.0101%" height="15" fill="rgb(243,35,44)" fg:x="46" fg:w="1"/><text x="46.7146%" y="255.50"></text></g><g><title>6180974592 (1 samples, 1.01%)</title><rect x="47.4747%" y="389" width="1.0101%" height="15" fill="rgb(246,89,9)" fg:x="47" fg:w="1"/><text x="47.7247%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="47.4747%" y="373" width="1.0101%" height="15" fill="rgb(233,213,13)" fg:x="47" fg:w="1"/><text x="47.7247%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="47.4747%" y="357" width="1.0101%" height="15" fill="rgb(233,141,41)" fg:x="47" fg:w="1"/><text x="47.7247%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="47.4747%" y="341" width="1.0101%" height="15" fill="rgb(239,167,4)" fg:x="47" fg:w="1"/><text x="47.7247%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="47.4747%" y="325" width="1.0101%" height="15" fill="rgb(209,217,16)" fg:x="47" fg:w="1"/><text x="47.7247%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="47.4747%" y="309" width="1.0101%" height="15" fill="rgb(219,88,35)" fg:x="47" fg:w="1"/><text x="47.7247%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="47.4747%" y="293" width="1.0101%" height="15" fill="rgb(220,193,23)" fg:x="47" fg:w="1"/><text x="47.7247%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="47.4747%" y="277" width="1.0101%" height="15" fill="rgb(230,90,52)" fg:x="47" fg:w="1"/><text x="47.7247%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="47.4747%" y="261" width="1.0101%" height="15" fill="rgb(252,106,19)" fg:x="47" fg:w="1"/><text x="47.7247%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="47.4747%" y="245" width="1.0101%" height="15" fill="rgb(206,74,20)" fg:x="47" fg:w="1"/><text x="47.7247%" y="255.50"></text></g><g><title>6183120896 (1 samples, 1.01%)</title><rect x="48.4848%" y="389" width="1.0101%" height="15" fill="rgb(230,138,44)" fg:x="48" fg:w="1"/><text x="48.7348%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="48.4848%" y="373" width="1.0101%" height="15" fill="rgb(235,182,43)" fg:x="48" fg:w="1"/><text x="48.7348%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="48.4848%" y="357" width="1.0101%" height="15" fill="rgb(242,16,51)" fg:x="48" fg:w="1"/><text x="48.7348%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="48.4848%" y="341" width="1.0101%" height="15" fill="rgb(248,9,4)" fg:x="48" fg:w="1"/><text x="48.7348%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="48.4848%" y="325" width="1.0101%" height="15" fill="rgb(210,31,22)" fg:x="48" fg:w="1"/><text x="48.7348%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="48.4848%" y="309" width="1.0101%" height="15" fill="rgb(239,54,39)" fg:x="48" fg:w="1"/><text x="48.7348%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="48.4848%" y="293" width="1.0101%" height="15" fill="rgb(230,99,41)" fg:x="48" fg:w="1"/><text x="48.7348%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="48.4848%" y="277" width="1.0101%" height="15" fill="rgb(253,106,12)" fg:x="48" fg:w="1"/><text x="48.7348%" y="287.50"></text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 1.01%)</title><rect x="48.4848%" y="261" width="1.0101%" height="15" fill="rgb(213,46,41)" fg:x="48" fg:w="1"/><text x="48.7348%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (1 samples, 1.01%)</title><rect x="48.4848%" y="245" width="1.0101%" height="15" fill="rgb(215,133,35)" fg:x="48" fg:w="1"/><text x="48.7348%" y="255.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="48.4848%" y="229" width="1.0101%" height="15" fill="rgb(213,28,5)" fg:x="48" fg:w="1"/><text x="48.7348%" y="239.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="48.4848%" y="213" width="1.0101%" height="15" fill="rgb(215,77,49)" fg:x="48" fg:w="1"/><text x="48.7348%" y="223.50"></text></g><g><title>6185267200 (1 samples, 1.01%)</title><rect x="49.4949%" y="389" width="1.0101%" height="15" fill="rgb(248,100,22)" fg:x="49" fg:w="1"/><text x="49.7449%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="49.4949%" y="373" width="1.0101%" height="15" fill="rgb(208,67,9)" fg:x="49" fg:w="1"/><text x="49.7449%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="49.4949%" y="357" width="1.0101%" height="15" fill="rgb(219,133,21)" fg:x="49" fg:w="1"/><text x="49.7449%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="49.4949%" y="341" width="1.0101%" height="15" fill="rgb(246,46,29)" fg:x="49" fg:w="1"/><text x="49.7449%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="49.4949%" y="325" width="1.0101%" height="15" fill="rgb(246,185,52)" fg:x="49" fg:w="1"/><text x="49.7449%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="49.4949%" y="309" width="1.0101%" height="15" fill="rgb(252,136,11)" fg:x="49" fg:w="1"/><text x="49.7449%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="49.4949%" y="293" width="1.0101%" height="15" fill="rgb(219,138,53)" fg:x="49" fg:w="1"/><text x="49.7449%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="49.4949%" y="277" width="1.0101%" height="15" fill="rgb(211,51,23)" fg:x="49" fg:w="1"/><text x="49.7449%" y="287.50"></text></g><g><title>6191706112 (1 samples, 1.01%)</title><rect x="50.5051%" y="389" width="1.0101%" height="15" fill="rgb(247,221,28)" fg:x="50" fg:w="1"/><text x="50.7551%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="50.5051%" y="373" width="1.0101%" height="15" fill="rgb(251,222,45)" fg:x="50" fg:w="1"/><text x="50.7551%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="50.5051%" y="357" width="1.0101%" height="15" fill="rgb(217,162,53)" fg:x="50" fg:w="1"/><text x="50.7551%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="50.5051%" y="341" width="1.0101%" height="15" fill="rgb(229,93,14)" fg:x="50" fg:w="1"/><text x="50.7551%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="50.5051%" y="325" width="1.0101%" height="15" fill="rgb(209,67,49)" fg:x="50" fg:w="1"/><text x="50.7551%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="50.5051%" y="309" width="1.0101%" height="15" fill="rgb(213,87,29)" fg:x="50" fg:w="1"/><text x="50.7551%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="50.5051%" y="293" width="1.0101%" height="15" fill="rgb(205,151,52)" fg:x="50" fg:w="1"/><text x="50.7551%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="50.5051%" y="277" width="1.0101%" height="15" fill="rgb(253,215,39)" fg:x="50" fg:w="1"/><text x="50.7551%" y="287.50"></text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 1.01%)</title><rect x="50.5051%" y="261" width="1.0101%" height="15" fill="rgb(221,220,41)" fg:x="50" fg:w="1"/><text x="50.7551%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (1 samples, 1.01%)</title><rect x="50.5051%" y="245" width="1.0101%" height="15" fill="rgb(218,133,21)" fg:x="50" fg:w="1"/><text x="50.7551%" y="255.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="50.5051%" y="229" width="1.0101%" height="15" fill="rgb(221,193,43)" fg:x="50" fg:w="1"/><text x="50.7551%" y="239.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="50.5051%" y="213" width="1.0101%" height="15" fill="rgb(240,128,52)" fg:x="50" fg:w="1"/><text x="50.7551%" y="223.50"></text></g><g><title>6198145024 (1 samples, 1.01%)</title><rect x="51.5152%" y="389" width="1.0101%" height="15" fill="rgb(253,114,12)" fg:x="51" fg:w="1"/><text x="51.7652%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="51.5152%" y="373" width="1.0101%" height="15" fill="rgb(215,223,47)" fg:x="51" fg:w="1"/><text x="51.7652%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="51.5152%" y="357" width="1.0101%" height="15" fill="rgb(248,225,23)" fg:x="51" fg:w="1"/><text x="51.7652%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="51.5152%" y="341" width="1.0101%" height="15" fill="rgb(250,108,0)" fg:x="51" fg:w="1"/><text x="51.7652%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="51.5152%" y="325" width="1.0101%" height="15" fill="rgb(228,208,7)" fg:x="51" fg:w="1"/><text x="51.7652%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="51.5152%" y="309" width="1.0101%" height="15" fill="rgb(244,45,10)" fg:x="51" fg:w="1"/><text x="51.7652%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="51.5152%" y="293" width="1.0101%" height="15" fill="rgb(207,125,25)" fg:x="51" fg:w="1"/><text x="51.7652%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="51.5152%" y="277" width="1.0101%" height="15" fill="rgb(210,195,18)" fg:x="51" fg:w="1"/><text x="51.7652%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="51.5152%" y="261" width="1.0101%" height="15" fill="rgb(249,80,12)" fg:x="51" fg:w="1"/><text x="51.7652%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="51.5152%" y="245" width="1.0101%" height="15" fill="rgb(221,65,9)" fg:x="51" fg:w="1"/><text x="51.7652%" y="255.50"></text></g><g><title>6208876544 (1 samples, 1.01%)</title><rect x="52.5253%" y="389" width="1.0101%" height="15" fill="rgb(235,49,36)" fg:x="52" fg:w="1"/><text x="52.7753%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="52.5253%" y="373" width="1.0101%" height="15" fill="rgb(225,32,20)" fg:x="52" fg:w="1"/><text x="52.7753%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="52.5253%" y="357" width="1.0101%" height="15" fill="rgb(215,141,46)" fg:x="52" fg:w="1"/><text x="52.7753%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="52.5253%" y="341" width="1.0101%" height="15" fill="rgb(250,160,47)" fg:x="52" fg:w="1"/><text x="52.7753%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="52.5253%" y="325" width="1.0101%" height="15" fill="rgb(216,222,40)" fg:x="52" fg:w="1"/><text x="52.7753%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="52.5253%" y="309" width="1.0101%" height="15" fill="rgb(234,217,39)" fg:x="52" fg:w="1"/><text x="52.7753%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="52.5253%" y="293" width="1.0101%" height="15" fill="rgb(207,178,40)" fg:x="52" fg:w="1"/><text x="52.7753%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="52.5253%" y="277" width="1.0101%" height="15" fill="rgb(221,136,13)" fg:x="52" fg:w="1"/><text x="52.7753%" y="287.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="52.5253%" y="261" width="1.0101%" height="15" fill="rgb(249,199,10)" fg:x="52" fg:w="1"/><text x="52.7753%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="52.5253%" y="245" width="1.0101%" height="15" fill="rgb(249,222,13)" fg:x="52" fg:w="1"/><text x="52.7753%" y="255.50"></text></g><g><title>6213169152 (1 samples, 1.01%)</title><rect x="53.5354%" y="389" width="1.0101%" height="15" fill="rgb(244,185,38)" fg:x="53" fg:w="1"/><text x="53.7854%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="53.5354%" y="373" width="1.0101%" height="15" fill="rgb(236,202,9)" fg:x="53" fg:w="1"/><text x="53.7854%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="53.5354%" y="357" width="1.0101%" height="15" fill="rgb(250,229,37)" fg:x="53" fg:w="1"/><text x="53.7854%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="53.5354%" y="341" width="1.0101%" height="15" fill="rgb(206,174,23)" fg:x="53" fg:w="1"/><text x="53.7854%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="53.5354%" y="325" width="1.0101%" height="15" fill="rgb(211,33,43)" fg:x="53" fg:w="1"/><text x="53.7854%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="53.5354%" y="309" width="1.0101%" height="15" fill="rgb(245,58,50)" fg:x="53" fg:w="1"/><text x="53.7854%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="53.5354%" y="293" width="1.0101%" height="15" fill="rgb(244,68,36)" fg:x="53" fg:w="1"/><text x="53.7854%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="53.5354%" y="277" width="1.0101%" height="15" fill="rgb(232,229,15)" fg:x="53" fg:w="1"/><text x="53.7854%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="53.5354%" y="261" width="1.0101%" height="15" fill="rgb(254,30,23)" fg:x="53" fg:w="1"/><text x="53.7854%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="53.5354%" y="245" width="1.0101%" height="15" fill="rgb(235,160,14)" fg:x="53" fg:w="1"/><text x="53.7854%" y="255.50"></text></g><g><title>std::sys::pal::unix::net::Socket::new_raw (1 samples, 1.01%)</title><rect x="53.5354%" y="229" width="1.0101%" height="15" fill="rgb(212,155,44)" fg:x="53" fg:w="1"/><text x="53.7854%" y="239.50"></text></g><g><title>6217461760 (1 samples, 1.01%)</title><rect x="54.5455%" y="389" width="1.0101%" height="15" fill="rgb(226,2,50)" fg:x="54" fg:w="1"/><text x="54.7955%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="54.5455%" y="373" width="1.0101%" height="15" fill="rgb(234,177,6)" fg:x="54" fg:w="1"/><text x="54.7955%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="54.5455%" y="357" width="1.0101%" height="15" fill="rgb(217,24,9)" fg:x="54" fg:w="1"/><text x="54.7955%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="54.5455%" y="341" width="1.0101%" height="15" fill="rgb(220,13,46)" fg:x="54" fg:w="1"/><text x="54.7955%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="54.5455%" y="325" width="1.0101%" height="15" fill="rgb(239,221,27)" fg:x="54" fg:w="1"/><text x="54.7955%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="54.5455%" y="309" width="1.0101%" height="15" fill="rgb(222,198,25)" fg:x="54" fg:w="1"/><text x="54.7955%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="54.5455%" y="293" width="1.0101%" height="15" fill="rgb(211,99,13)" fg:x="54" fg:w="1"/><text x="54.7955%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="54.5455%" y="277" width="1.0101%" height="15" fill="rgb(232,111,31)" fg:x="54" fg:w="1"/><text x="54.7955%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="54.5455%" y="261" width="1.0101%" height="15" fill="rgb(245,82,37)" fg:x="54" fg:w="1"/><text x="54.7955%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="54.5455%" y="245" width="1.0101%" height="15" fill="rgb(227,149,46)" fg:x="54" fg:w="1"/><text x="54.7955%" y="255.50"></text></g><g><title>6219608064 (1 samples, 1.01%)</title><rect x="55.5556%" y="389" width="1.0101%" height="15" fill="rgb(218,36,50)" fg:x="55" fg:w="1"/><text x="55.8056%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="55.5556%" y="373" width="1.0101%" height="15" fill="rgb(226,80,48)" fg:x="55" fg:w="1"/><text x="55.8056%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="55.5556%" y="357" width="1.0101%" height="15" fill="rgb(238,224,15)" fg:x="55" fg:w="1"/><text x="55.8056%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="55.5556%" y="341" width="1.0101%" height="15" fill="rgb(241,136,10)" fg:x="55" fg:w="1"/><text x="55.8056%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="55.5556%" y="325" width="1.0101%" height="15" fill="rgb(208,32,45)" fg:x="55" fg:w="1"/><text x="55.8056%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="55.5556%" y="309" width="1.0101%" height="15" fill="rgb(207,135,9)" fg:x="55" fg:w="1"/><text x="55.8056%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="55.5556%" y="293" width="1.0101%" height="15" fill="rgb(206,86,44)" fg:x="55" fg:w="1"/><text x="55.8056%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="55.5556%" y="277" width="1.0101%" height="15" fill="rgb(245,177,15)" fg:x="55" fg:w="1"/><text x="55.8056%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="55.5556%" y="261" width="1.0101%" height="15" fill="rgb(206,64,50)" fg:x="55" fg:w="1"/><text x="55.8056%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="55.5556%" y="245" width="1.0101%" height="15" fill="rgb(234,36,40)" fg:x="55" fg:w="1"/><text x="55.8056%" y="255.50"></text></g><g><title>std::sys::pal::unix::net::Socket::new_raw (1 samples, 1.01%)</title><rect x="55.5556%" y="229" width="1.0101%" height="15" fill="rgb(213,64,8)" fg:x="55" fg:w="1"/><text x="55.8056%" y="239.50"></text></g><g><title>6226046976 (1 samples, 1.01%)</title><rect x="56.5657%" y="389" width="1.0101%" height="15" fill="rgb(210,75,36)" fg:x="56" fg:w="1"/><text x="56.8157%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="56.5657%" y="373" width="1.0101%" height="15" fill="rgb(229,88,21)" fg:x="56" fg:w="1"/><text x="56.8157%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="56.5657%" y="357" width="1.0101%" height="15" fill="rgb(252,204,47)" fg:x="56" fg:w="1"/><text x="56.8157%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="56.5657%" y="341" width="1.0101%" height="15" fill="rgb(208,77,27)" fg:x="56" fg:w="1"/><text x="56.8157%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="56.5657%" y="325" width="1.0101%" height="15" fill="rgb(221,76,26)" fg:x="56" fg:w="1"/><text x="56.8157%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="56.5657%" y="309" width="1.0101%" height="15" fill="rgb(225,139,18)" fg:x="56" fg:w="1"/><text x="56.8157%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="56.5657%" y="293" width="1.0101%" height="15" fill="rgb(230,137,11)" fg:x="56" fg:w="1"/><text x="56.8157%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="56.5657%" y="277" width="1.0101%" height="15" fill="rgb(212,28,1)" fg:x="56" fg:w="1"/><text x="56.8157%" y="287.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="56.5657%" y="261" width="1.0101%" height="15" fill="rgb(248,164,17)" fg:x="56" fg:w="1"/><text x="56.8157%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="56.5657%" y="245" width="1.0101%" height="15" fill="rgb(222,171,42)" fg:x="56" fg:w="1"/><text x="56.8157%" y="255.50"></text></g><g><title>6234632192 (1 samples, 1.01%)</title><rect x="57.5758%" y="389" width="1.0101%" height="15" fill="rgb(243,84,45)" fg:x="57" fg:w="1"/><text x="57.8258%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="57.5758%" y="373" width="1.0101%" height="15" fill="rgb(252,49,23)" fg:x="57" fg:w="1"/><text x="57.8258%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="57.5758%" y="357" width="1.0101%" height="15" fill="rgb(215,19,7)" fg:x="57" fg:w="1"/><text x="57.8258%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="57.5758%" y="341" width="1.0101%" height="15" fill="rgb(238,81,41)" fg:x="57" fg:w="1"/><text x="57.8258%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="57.5758%" y="325" width="1.0101%" height="15" fill="rgb(210,199,37)" fg:x="57" fg:w="1"/><text x="57.8258%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="57.5758%" y="309" width="1.0101%" height="15" fill="rgb(244,192,49)" fg:x="57" fg:w="1"/><text x="57.8258%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="57.5758%" y="293" width="1.0101%" height="15" fill="rgb(226,211,11)" fg:x="57" fg:w="1"/><text x="57.8258%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="57.5758%" y="277" width="1.0101%" height="15" fill="rgb(236,162,54)" fg:x="57" fg:w="1"/><text x="57.8258%" y="287.50"></text></g><g><title>6236778496 (1 samples, 1.01%)</title><rect x="58.5859%" y="389" width="1.0101%" height="15" fill="rgb(220,229,9)" fg:x="58" fg:w="1"/><text x="58.8359%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="58.5859%" y="373" width="1.0101%" height="15" fill="rgb(250,87,22)" fg:x="58" fg:w="1"/><text x="58.8359%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="58.5859%" y="357" width="1.0101%" height="15" fill="rgb(239,43,17)" fg:x="58" fg:w="1"/><text x="58.8359%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="58.5859%" y="341" width="1.0101%" height="15" fill="rgb(231,177,25)" fg:x="58" fg:w="1"/><text x="58.8359%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="58.5859%" y="325" width="1.0101%" height="15" fill="rgb(219,179,1)" fg:x="58" fg:w="1"/><text x="58.8359%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="58.5859%" y="309" width="1.0101%" height="15" fill="rgb(238,219,53)" fg:x="58" fg:w="1"/><text x="58.8359%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="58.5859%" y="293" width="1.0101%" height="15" fill="rgb(232,167,36)" fg:x="58" fg:w="1"/><text x="58.8359%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="58.5859%" y="277" width="1.0101%" height="15" fill="rgb(244,19,51)" fg:x="58" fg:w="1"/><text x="58.8359%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="58.5859%" y="261" width="1.0101%" height="15" fill="rgb(224,6,22)" fg:x="58" fg:w="1"/><text x="58.8359%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="58.5859%" y="245" width="1.0101%" height="15" fill="rgb(224,145,5)" fg:x="58" fg:w="1"/><text x="58.8359%" y="255.50"></text></g><g><title>std::sys::pal::unix::net::Socket::new_raw (1 samples, 1.01%)</title><rect x="58.5859%" y="229" width="1.0101%" height="15" fill="rgb(234,130,49)" fg:x="58" fg:w="1"/><text x="58.8359%" y="239.50"></text></g><g><title>6249656320 (1 samples, 1.01%)</title><rect x="59.5960%" y="389" width="1.0101%" height="15" fill="rgb(254,6,2)" fg:x="59" fg:w="1"/><text x="59.8460%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="59.5960%" y="373" width="1.0101%" height="15" fill="rgb(208,96,46)" fg:x="59" fg:w="1"/><text x="59.8460%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="59.5960%" y="357" width="1.0101%" height="15" fill="rgb(239,3,39)" fg:x="59" fg:w="1"/><text x="59.8460%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="59.5960%" y="341" width="1.0101%" height="15" fill="rgb(233,210,1)" fg:x="59" fg:w="1"/><text x="59.8460%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="59.5960%" y="325" width="1.0101%" height="15" fill="rgb(244,137,37)" fg:x="59" fg:w="1"/><text x="59.8460%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="59.5960%" y="309" width="1.0101%" height="15" fill="rgb(240,136,2)" fg:x="59" fg:w="1"/><text x="59.8460%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="59.5960%" y="293" width="1.0101%" height="15" fill="rgb(239,18,37)" fg:x="59" fg:w="1"/><text x="59.8460%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="59.5960%" y="277" width="1.0101%" height="15" fill="rgb(218,185,22)" fg:x="59" fg:w="1"/><text x="59.8460%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="59.5960%" y="261" width="1.0101%" height="15" fill="rgb(225,218,4)" fg:x="59" fg:w="1"/><text x="59.8460%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="59.5960%" y="245" width="1.0101%" height="15" fill="rgb(230,182,32)" fg:x="59" fg:w="1"/><text x="59.8460%" y="255.50"></text></g><g><title>6256095232 (1 samples, 1.01%)</title><rect x="60.6061%" y="389" width="1.0101%" height="15" fill="rgb(242,56,43)" fg:x="60" fg:w="1"/><text x="60.8561%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="60.6061%" y="373" width="1.0101%" height="15" fill="rgb(233,99,24)" fg:x="60" fg:w="1"/><text x="60.8561%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="60.6061%" y="357" width="1.0101%" height="15" fill="rgb(234,209,42)" fg:x="60" fg:w="1"/><text x="60.8561%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="60.6061%" y="341" width="1.0101%" height="15" fill="rgb(227,7,12)" fg:x="60" fg:w="1"/><text x="60.8561%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="60.6061%" y="325" width="1.0101%" height="15" fill="rgb(245,203,43)" fg:x="60" fg:w="1"/><text x="60.8561%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="60.6061%" y="309" width="1.0101%" height="15" fill="rgb(238,205,33)" fg:x="60" fg:w="1"/><text x="60.8561%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="60.6061%" y="293" width="1.0101%" height="15" fill="rgb(231,56,7)" fg:x="60" fg:w="1"/><text x="60.8561%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="60.6061%" y="277" width="1.0101%" height="15" fill="rgb(244,186,29)" fg:x="60" fg:w="1"/><text x="60.8561%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="60.6061%" y="261" width="1.0101%" height="15" fill="rgb(234,111,31)" fg:x="60" fg:w="1"/><text x="60.8561%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="60.6061%" y="245" width="1.0101%" height="15" fill="rgb(241,149,10)" fg:x="60" fg:w="1"/><text x="60.8561%" y="255.50"></text></g><g><title>6268973056 (1 samples, 1.01%)</title><rect x="61.6162%" y="389" width="1.0101%" height="15" fill="rgb(249,206,44)" fg:x="61" fg:w="1"/><text x="61.8662%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="61.6162%" y="373" width="1.0101%" height="15" fill="rgb(251,153,30)" fg:x="61" fg:w="1"/><text x="61.8662%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="61.6162%" y="357" width="1.0101%" height="15" fill="rgb(239,152,38)" fg:x="61" fg:w="1"/><text x="61.8662%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="61.6162%" y="341" width="1.0101%" height="15" fill="rgb(249,139,47)" fg:x="61" fg:w="1"/><text x="61.8662%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="61.6162%" y="325" width="1.0101%" height="15" fill="rgb(244,64,35)" fg:x="61" fg:w="1"/><text x="61.8662%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="61.6162%" y="309" width="1.0101%" height="15" fill="rgb(216,46,15)" fg:x="61" fg:w="1"/><text x="61.8662%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="61.6162%" y="293" width="1.0101%" height="15" fill="rgb(250,74,19)" fg:x="61" fg:w="1"/><text x="61.8662%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="61.6162%" y="277" width="1.0101%" height="15" fill="rgb(249,42,33)" fg:x="61" fg:w="1"/><text x="61.8662%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="61.6162%" y="261" width="1.0101%" height="15" fill="rgb(242,149,17)" fg:x="61" fg:w="1"/><text x="61.8662%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="61.6162%" y="245" width="1.0101%" height="15" fill="rgb(244,29,21)" fg:x="61" fg:w="1"/><text x="61.8662%" y="255.50"></text></g><g><title>6303313920 (1 samples, 1.01%)</title><rect x="62.6263%" y="389" width="1.0101%" height="15" fill="rgb(220,130,37)" fg:x="62" fg:w="1"/><text x="62.8763%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="62.6263%" y="373" width="1.0101%" height="15" fill="rgb(211,67,2)" fg:x="62" fg:w="1"/><text x="62.8763%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="62.6263%" y="357" width="1.0101%" height="15" fill="rgb(235,68,52)" fg:x="62" fg:w="1"/><text x="62.8763%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="62.6263%" y="341" width="1.0101%" height="15" fill="rgb(246,142,3)" fg:x="62" fg:w="1"/><text x="62.8763%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="62.6263%" y="325" width="1.0101%" height="15" fill="rgb(241,25,7)" fg:x="62" fg:w="1"/><text x="62.8763%" y="335.50"></text></g><g><title>__pthread_mutex_global_init (1 samples, 1.01%)</title><rect x="62.6263%" y="309" width="1.0101%" height="15" fill="rgb(242,119,39)" fg:x="62" fg:w="1"/><text x="62.8763%" y="319.50"></text></g><g><title>_pthread_create (1 samples, 1.01%)</title><rect x="62.6263%" y="293" width="1.0101%" height="15" fill="rgb(241,98,45)" fg:x="62" fg:w="1"/><text x="62.8763%" y="303.50"></text></g><g><title>6314045440 (1 samples, 1.01%)</title><rect x="63.6364%" y="389" width="1.0101%" height="15" fill="rgb(254,28,30)" fg:x="63" fg:w="1"/><text x="63.8864%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="63.6364%" y="373" width="1.0101%" height="15" fill="rgb(241,142,54)" fg:x="63" fg:w="1"/><text x="63.8864%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="63.6364%" y="357" width="1.0101%" height="15" fill="rgb(222,85,15)" fg:x="63" fg:w="1"/><text x="63.8864%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="63.6364%" y="341" width="1.0101%" height="15" fill="rgb(210,85,47)" fg:x="63" fg:w="1"/><text x="63.8864%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="63.6364%" y="325" width="1.0101%" height="15" fill="rgb(224,206,25)" fg:x="63" fg:w="1"/><text x="63.8864%" y="335.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 1.01%)</title><rect x="63.6364%" y="309" width="1.0101%" height="15" fill="rgb(243,201,19)" fg:x="63" fg:w="1"/><text x="63.8864%" y="319.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 1.01%)</title><rect x="63.6364%" y="293" width="1.0101%" height="15" fill="rgb(236,59,4)" fg:x="63" fg:w="1"/><text x="63.8864%" y="303.50"></text></g><g><title>6316191744 (1 samples, 1.01%)</title><rect x="64.6465%" y="389" width="1.0101%" height="15" fill="rgb(254,179,45)" fg:x="64" fg:w="1"/><text x="64.8965%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="64.6465%" y="373" width="1.0101%" height="15" fill="rgb(226,14,10)" fg:x="64" fg:w="1"/><text x="64.8965%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="64.6465%" y="357" width="1.0101%" height="15" fill="rgb(244,27,41)" fg:x="64" fg:w="1"/><text x="64.8965%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="64.6465%" y="341" width="1.0101%" height="15" fill="rgb(235,35,32)" fg:x="64" fg:w="1"/><text x="64.8965%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="64.6465%" y="325" width="1.0101%" height="15" fill="rgb(218,68,31)" fg:x="64" fg:w="1"/><text x="64.8965%" y="335.50"></text></g><g><title>__pthread_main_thread_init (1 samples, 1.01%)</title><rect x="64.6465%" y="309" width="1.0101%" height="15" fill="rgb(207,120,37)" fg:x="64" fg:w="1"/><text x="64.8965%" y="319.50"></text></g><g><title>_pthread_rwlock_wrlock (1 samples, 1.01%)</title><rect x="64.6465%" y="293" width="1.0101%" height="15" fill="rgb(227,98,0)" fg:x="64" fg:w="1"/><text x="64.8965%" y="303.50"></text></g><g><title>6326923264 (2 samples, 2.02%)</title><rect x="65.6566%" y="389" width="2.0202%" height="15" fill="rgb(207,7,3)" fg:x="65" fg:w="2"/><text x="65.9066%" y="399.50">6..</text></g><g><title>__pthread_joiner_wake (2 samples, 2.02%)</title><rect x="65.6566%" y="373" width="2.0202%" height="15" fill="rgb(206,98,19)" fg:x="65" fg:w="2"/><text x="65.9066%" y="383.50">_..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 2.02%)</title><rect x="65.6566%" y="357" width="2.0202%" height="15" fill="rgb(217,5,26)" fg:x="65" fg:w="2"/><text x="65.9066%" y="367.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 2.02%)</title><rect x="65.6566%" y="341" width="2.0202%" height="15" fill="rgb(235,190,38)" fg:x="65" fg:w="2"/><text x="65.9066%" y="351.50">c..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 2.02%)</title><rect x="65.6566%" y="325" width="2.0202%" height="15" fill="rgb(247,86,24)" fg:x="65" fg:w="2"/><text x="65.9066%" y="335.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 2.02%)</title><rect x="65.6566%" y="309" width="2.0202%" height="15" fill="rgb(205,101,16)" fg:x="65" fg:w="2"/><text x="65.9066%" y="319.50">c..</text></g><g><title>kvs::client::KvClient::get (2 samples, 2.02%)</title><rect x="65.6566%" y="293" width="2.0202%" height="15" fill="rgb(246,168,33)" fg:x="65" fg:w="2"/><text x="65.9066%" y="303.50">k..</text></g><g><title>kvs::client::KvClient::send (2 samples, 2.02%)</title><rect x="65.6566%" y="277" width="2.0202%" height="15" fill="rgb(231,114,1)" fg:x="65" fg:w="2"/><text x="65.9066%" y="287.50">k..</text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 2.02%)</title><rect x="65.6566%" y="261" width="2.0202%" height="15" fill="rgb(207,184,53)" fg:x="65" fg:w="2"/><text x="65.9066%" y="271.50">t..</text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 2.02%)</title><rect x="65.6566%" y="245" width="2.0202%" height="15" fill="rgb(224,95,51)" fg:x="65" fg:w="2"/><text x="65.9066%" y="255.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 2.02%)</title><rect x="65.6566%" y="229" width="2.0202%" height="15" fill="rgb(212,188,45)" fg:x="65" fg:w="2"/><text x="65.9066%" y="239.50">s..</text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (2 samples, 2.02%)</title><rect x="65.6566%" y="213" width="2.0202%" height="15" fill="rgb(223,154,38)" fg:x="65" fg:w="2"/><text x="65.9066%" y="223.50">&lt;..</text></g><g><title>6329069568 (1 samples, 1.01%)</title><rect x="67.6768%" y="389" width="1.0101%" height="15" fill="rgb(251,22,52)" fg:x="67" fg:w="1"/><text x="67.9268%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="67.6768%" y="373" width="1.0101%" height="15" fill="rgb(229,209,22)" fg:x="67" fg:w="1"/><text x="67.9268%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="67.6768%" y="357" width="1.0101%" height="15" fill="rgb(234,138,34)" fg:x="67" fg:w="1"/><text x="67.9268%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="67.6768%" y="341" width="1.0101%" height="15" fill="rgb(212,95,11)" fg:x="67" fg:w="1"/><text x="67.9268%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="67.6768%" y="325" width="1.0101%" height="15" fill="rgb(240,179,47)" fg:x="67" fg:w="1"/><text x="67.9268%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="67.6768%" y="309" width="1.0101%" height="15" fill="rgb(240,163,11)" fg:x="67" fg:w="1"/><text x="67.9268%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="67.6768%" y="293" width="1.0101%" height="15" fill="rgb(236,37,12)" fg:x="67" fg:w="1"/><text x="67.9268%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="67.6768%" y="277" width="1.0101%" height="15" fill="rgb(232,164,16)" fg:x="67" fg:w="1"/><text x="67.9268%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="67.6768%" y="261" width="1.0101%" height="15" fill="rgb(244,205,15)" fg:x="67" fg:w="1"/><text x="67.9268%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="67.6768%" y="245" width="1.0101%" height="15" fill="rgb(223,117,47)" fg:x="67" fg:w="1"/><text x="67.9268%" y="255.50"></text></g><g><title>6335508480 (1 samples, 1.01%)</title><rect x="68.6869%" y="389" width="1.0101%" height="15" fill="rgb(244,107,35)" fg:x="68" fg:w="1"/><text x="68.9369%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="68.6869%" y="373" width="1.0101%" height="15" fill="rgb(205,140,8)" fg:x="68" fg:w="1"/><text x="68.9369%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="68.6869%" y="357" width="1.0101%" height="15" fill="rgb(228,84,46)" fg:x="68" fg:w="1"/><text x="68.9369%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="68.6869%" y="341" width="1.0101%" height="15" fill="rgb(254,188,9)" fg:x="68" fg:w="1"/><text x="68.9369%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="68.6869%" y="325" width="1.0101%" height="15" fill="rgb(206,112,54)" fg:x="68" fg:w="1"/><text x="68.9369%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="68.6869%" y="309" width="1.0101%" height="15" fill="rgb(216,84,49)" fg:x="68" fg:w="1"/><text x="68.9369%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="68.6869%" y="293" width="1.0101%" height="15" fill="rgb(214,194,35)" fg:x="68" fg:w="1"/><text x="68.9369%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="68.6869%" y="277" width="1.0101%" height="15" fill="rgb(249,28,3)" fg:x="68" fg:w="1"/><text x="68.9369%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="68.6869%" y="261" width="1.0101%" height="15" fill="rgb(222,56,52)" fg:x="68" fg:w="1"/><text x="68.9369%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="68.6869%" y="245" width="1.0101%" height="15" fill="rgb(245,217,50)" fg:x="68" fg:w="1"/><text x="68.9369%" y="255.50"></text></g><g><title>6337654784 (1 samples, 1.01%)</title><rect x="69.6970%" y="389" width="1.0101%" height="15" fill="rgb(213,201,24)" fg:x="69" fg:w="1"/><text x="69.9470%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="69.6970%" y="373" width="1.0101%" height="15" fill="rgb(248,116,28)" fg:x="69" fg:w="1"/><text x="69.9470%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="69.6970%" y="357" width="1.0101%" height="15" fill="rgb(219,72,43)" fg:x="69" fg:w="1"/><text x="69.9470%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="69.6970%" y="341" width="1.0101%" height="15" fill="rgb(209,138,14)" fg:x="69" fg:w="1"/><text x="69.9470%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="69.6970%" y="325" width="1.0101%" height="15" fill="rgb(222,18,33)" fg:x="69" fg:w="1"/><text x="69.9470%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="69.6970%" y="309" width="1.0101%" height="15" fill="rgb(213,199,7)" fg:x="69" fg:w="1"/><text x="69.9470%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="69.6970%" y="293" width="1.0101%" height="15" fill="rgb(250,110,10)" fg:x="69" fg:w="1"/><text x="69.9470%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="69.6970%" y="277" width="1.0101%" height="15" fill="rgb(248,123,6)" fg:x="69" fg:w="1"/><text x="69.9470%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="69.6970%" y="261" width="1.0101%" height="15" fill="rgb(206,91,31)" fg:x="69" fg:w="1"/><text x="69.9470%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="69.6970%" y="245" width="1.0101%" height="15" fill="rgb(211,154,13)" fg:x="69" fg:w="1"/><text x="69.9470%" y="255.50"></text></g><g><title>6348386304 (1 samples, 1.01%)</title><rect x="70.7071%" y="389" width="1.0101%" height="15" fill="rgb(225,148,7)" fg:x="70" fg:w="1"/><text x="70.9571%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="70.7071%" y="373" width="1.0101%" height="15" fill="rgb(220,160,43)" fg:x="70" fg:w="1"/><text x="70.9571%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="70.7071%" y="357" width="1.0101%" height="15" fill="rgb(213,52,39)" fg:x="70" fg:w="1"/><text x="70.9571%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="70.7071%" y="341" width="1.0101%" height="15" fill="rgb(243,137,7)" fg:x="70" fg:w="1"/><text x="70.9571%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="70.7071%" y="325" width="1.0101%" height="15" fill="rgb(230,79,13)" fg:x="70" fg:w="1"/><text x="70.9571%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="70.7071%" y="309" width="1.0101%" height="15" fill="rgb(247,105,23)" fg:x="70" fg:w="1"/><text x="70.9571%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="70.7071%" y="293" width="1.0101%" height="15" fill="rgb(223,179,41)" fg:x="70" fg:w="1"/><text x="70.9571%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="70.7071%" y="277" width="1.0101%" height="15" fill="rgb(218,9,34)" fg:x="70" fg:w="1"/><text x="70.9571%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="70.7071%" y="261" width="1.0101%" height="15" fill="rgb(222,106,8)" fg:x="70" fg:w="1"/><text x="70.9571%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="70.7071%" y="245" width="1.0101%" height="15" fill="rgb(211,220,0)" fg:x="70" fg:w="1"/><text x="70.9571%" y="255.50"></text></g><g><title>6350532608 (1 samples, 1.01%)</title><rect x="71.7172%" y="389" width="1.0101%" height="15" fill="rgb(229,52,16)" fg:x="71" fg:w="1"/><text x="71.9672%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="71.7172%" y="373" width="1.0101%" height="15" fill="rgb(212,155,18)" fg:x="71" fg:w="1"/><text x="71.9672%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="71.7172%" y="357" width="1.0101%" height="15" fill="rgb(242,21,14)" fg:x="71" fg:w="1"/><text x="71.9672%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="71.7172%" y="341" width="1.0101%" height="15" fill="rgb(222,19,48)" fg:x="71" fg:w="1"/><text x="71.9672%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="71.7172%" y="325" width="1.0101%" height="15" fill="rgb(232,45,27)" fg:x="71" fg:w="1"/><text x="71.9672%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="71.7172%" y="309" width="1.0101%" height="15" fill="rgb(249,103,42)" fg:x="71" fg:w="1"/><text x="71.9672%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="71.7172%" y="293" width="1.0101%" height="15" fill="rgb(246,81,33)" fg:x="71" fg:w="1"/><text x="71.9672%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="71.7172%" y="277" width="1.0101%" height="15" fill="rgb(252,33,42)" fg:x="71" fg:w="1"/><text x="71.9672%" y="287.50"></text></g><g><title>std::io::default_read_exact (1 samples, 1.01%)</title><rect x="71.7172%" y="261" width="1.0101%" height="15" fill="rgb(209,212,41)" fg:x="71" fg:w="1"/><text x="71.9672%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 1.01%)</title><rect x="71.7172%" y="245" width="1.0101%" height="15" fill="rgb(207,154,6)" fg:x="71" fg:w="1"/><text x="71.9672%" y="255.50"></text></g><g><title>6371995648 (1 samples, 1.01%)</title><rect x="72.7273%" y="389" width="1.0101%" height="15" fill="rgb(223,64,47)" fg:x="72" fg:w="1"/><text x="72.9773%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="72.7273%" y="373" width="1.0101%" height="15" fill="rgb(211,161,38)" fg:x="72" fg:w="1"/><text x="72.9773%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="72.7273%" y="357" width="1.0101%" height="15" fill="rgb(219,138,40)" fg:x="72" fg:w="1"/><text x="72.9773%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="72.7273%" y="341" width="1.0101%" height="15" fill="rgb(241,228,46)" fg:x="72" fg:w="1"/><text x="72.9773%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="72.7273%" y="325" width="1.0101%" height="15" fill="rgb(223,209,38)" fg:x="72" fg:w="1"/><text x="72.9773%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="72.7273%" y="309" width="1.0101%" height="15" fill="rgb(236,164,45)" fg:x="72" fg:w="1"/><text x="72.9773%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="72.7273%" y="293" width="1.0101%" height="15" fill="rgb(231,15,5)" fg:x="72" fg:w="1"/><text x="72.9773%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="72.7273%" y="277" width="1.0101%" height="15" fill="rgb(252,35,15)" fg:x="72" fg:w="1"/><text x="72.9773%" y="287.50"></text></g><g><title>std::io::Write::write_all (1 samples, 1.01%)</title><rect x="72.7273%" y="261" width="1.0101%" height="15" fill="rgb(248,181,18)" fg:x="72" fg:w="1"/><text x="72.9773%" y="271.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 1.01%)</title><rect x="72.7273%" y="245" width="1.0101%" height="15" fill="rgb(233,39,42)" fg:x="72" fg:w="1"/><text x="72.9773%" y="255.50"></text></g><g><title>6382727168 (1 samples, 1.01%)</title><rect x="73.7374%" y="389" width="1.0101%" height="15" fill="rgb(238,110,33)" fg:x="73" fg:w="1"/><text x="73.9874%" y="399.50"></text></g><g><title>__pthread_joiner_wake (1 samples, 1.01%)</title><rect x="73.7374%" y="373" width="1.0101%" height="15" fill="rgb(233,195,10)" fg:x="73" fg:w="1"/><text x="73.9874%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 1.01%)</title><rect x="73.7374%" y="357" width="1.0101%" height="15" fill="rgb(254,105,3)" fg:x="73" fg:w="1"/><text x="73.9874%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="73.7374%" y="341" width="1.0101%" height="15" fill="rgb(221,225,9)" fg:x="73" fg:w="1"/><text x="73.9874%" y="351.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 1.01%)</title><rect x="73.7374%" y="325" width="1.0101%" height="15" fill="rgb(224,227,45)" fg:x="73" fg:w="1"/><text x="73.9874%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 1.01%)</title><rect x="73.7374%" y="309" width="1.0101%" height="15" fill="rgb(229,198,43)" fg:x="73" fg:w="1"/><text x="73.9874%" y="319.50"></text></g><g><title>kvs::client::KvClient::get (1 samples, 1.01%)</title><rect x="73.7374%" y="293" width="1.0101%" height="15" fill="rgb(206,209,35)" fg:x="73" fg:w="1"/><text x="73.9874%" y="303.50"></text></g><g><title>kvs::client::KvClient::send (1 samples, 1.01%)</title><rect x="73.7374%" y="277" width="1.0101%" height="15" fill="rgb(245,195,53)" fg:x="73" fg:w="1"/><text x="73.9874%" y="287.50"></text></g><g><title>std::net::tcp::TcpStream::connect (1 samples, 1.01%)</title><rect x="73.7374%" y="261" width="1.0101%" height="15" fill="rgb(240,92,26)" fg:x="73" fg:w="1"/><text x="73.9874%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::connect (1 samples, 1.01%)</title><rect x="73.7374%" y="245" width="1.0101%" height="15" fill="rgb(207,40,23)" fg:x="73" fg:w="1"/><text x="73.9874%" y="255.50"></text></g><g><title>__pthread_cond_wait (5 samples, 5.05%)</title><rect x="74.7475%" y="277" width="5.0505%" height="15" fill="rgb(223,111,35)" fg:x="74" fg:w="5"/><text x="74.9975%" y="287.50">__pthr..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (6 samples, 6.06%)</title><rect x="74.7475%" y="293" width="6.0606%" height="15" fill="rgb(229,147,28)" fg:x="74" fg:w="6"/><text x="74.9975%" y="303.50">parking_..</text></g><g><title>__pthread_workqueue_init_with_workloop (1 samples, 1.01%)</title><rect x="79.7980%" y="277" width="1.0101%" height="15" fill="rgb(211,29,28)" fg:x="79" fg:w="1"/><text x="80.0480%" y="287.50"></text></g><g><title>6384873472 (7 samples, 7.07%)</title><rect x="74.7475%" y="389" width="7.0707%" height="15" fill="rgb(228,72,33)" fg:x="74" fg:w="7"/><text x="74.9975%" y="399.50">6384873472</text></g><g><title>__pthread_joiner_wake (7 samples, 7.07%)</title><rect x="74.7475%" y="373" width="7.0707%" height="15" fill="rgb(205,214,31)" fg:x="74" fg:w="7"/><text x="74.9975%" y="383.50">__pthread..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (7 samples, 7.07%)</title><rect x="74.7475%" y="357" width="7.0707%" height="15" fill="rgb(224,111,15)" fg:x="74" fg:w="7"/><text x="74.9975%" y="367.50">std::sys:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7 samples, 7.07%)</title><rect x="74.7475%" y="341" width="7.0707%" height="15" fill="rgb(253,21,26)" fg:x="74" fg:w="7"/><text x="74.9975%" y="351.50">core::ops..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7 samples, 7.07%)</title><rect x="74.7475%" y="325" width="7.0707%" height="15" fill="rgb(245,139,43)" fg:x="74" fg:w="7"/><text x="74.9975%" y="335.50">std::sys:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (7 samples, 7.07%)</title><rect x="74.7475%" y="309" width="7.0707%" height="15" fill="rgb(252,170,7)" fg:x="74" fg:w="7"/><text x="74.9975%" y="319.50">tokio::ru..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 1.01%)</title><rect x="80.8081%" y="293" width="1.0101%" height="15" fill="rgb(231,118,14)" fg:x="80" fg:w="1"/><text x="81.0581%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 1.01%)</title><rect x="80.8081%" y="277" width="1.0101%" height="15" fill="rgb(238,83,0)" fg:x="80" fg:w="1"/><text x="81.0581%" y="287.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 1.01%)</title><rect x="80.8081%" y="261" width="1.0101%" height="15" fill="rgb(221,39,39)" fg:x="80" fg:w="1"/><text x="81.0581%" y="271.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (1 samples, 1.01%)</title><rect x="80.8081%" y="245" width="1.0101%" height="15" fill="rgb(222,119,46)" fg:x="80" fg:w="1"/><text x="81.0581%" y="255.50"></text></g><g><title>6387019776 (3 samples, 3.03%)</title><rect x="81.8182%" y="389" width="3.0303%" height="15" fill="rgb(222,165,49)" fg:x="81" fg:w="3"/><text x="82.0682%" y="399.50">638..</text></g><g><title>__pthread_joiner_wake (3 samples, 3.03%)</title><rect x="81.8182%" y="373" width="3.0303%" height="15" fill="rgb(219,113,52)" fg:x="81" fg:w="3"/><text x="82.0682%" y="383.50">__p..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 3.03%)</title><rect x="81.8182%" y="357" width="3.0303%" height="15" fill="rgb(214,7,15)" fg:x="81" fg:w="3"/><text x="82.0682%" y="367.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 3.03%)</title><rect x="81.8182%" y="341" width="3.0303%" height="15" fill="rgb(235,32,4)" fg:x="81" fg:w="3"/><text x="82.0682%" y="351.50">cor..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 3.03%)</title><rect x="81.8182%" y="325" width="3.0303%" height="15" fill="rgb(238,90,54)" fg:x="81" fg:w="3"/><text x="82.0682%" y="335.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3 samples, 3.03%)</title><rect x="81.8182%" y="309" width="3.0303%" height="15" fill="rgb(213,208,19)" fg:x="81" fg:w="3"/><text x="82.0682%" y="319.50">tok..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 3.03%)</title><rect x="81.8182%" y="293" width="3.0303%" height="15" fill="rgb(233,156,4)" fg:x="81" fg:w="3"/><text x="82.0682%" y="303.50">par..</text></g><g><title>__pthread_cond_wait (3 samples, 3.03%)</title><rect x="81.8182%" y="277" width="3.0303%" height="15" fill="rgb(207,194,5)" fg:x="81" fg:w="3"/><text x="82.0682%" y="287.50">__p..</text></g><g><title>std::io::Write::write_all (2 samples, 2.02%)</title><rect x="86.8687%" y="181" width="2.0202%" height="15" fill="rgb(206,111,30)" fg:x="86" fg:w="2"/><text x="87.1187%" y="191.50">s..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 2.02%)</title><rect x="86.8687%" y="165" width="2.0202%" height="15" fill="rgb(243,70,54)" fg:x="86" fg:w="2"/><text x="87.1187%" y="175.50">&lt;..</text></g><g><title>std::io::default_read_exact (7 samples, 7.07%)</title><rect x="88.8889%" y="181" width="7.0707%" height="15" fill="rgb(242,28,8)" fg:x="88" fg:w="7"/><text x="89.1389%" y="191.50">std::io::..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (7 samples, 7.07%)</title><rect x="88.8889%" y="165" width="7.0707%" height="15" fill="rgb(219,106,18)" fg:x="88" fg:w="7"/><text x="89.1389%" y="175.50">&lt;std::net..</text></g><g><title>std::net::tcp::TcpStream::connect (2 samples, 2.02%)</title><rect x="95.9596%" y="181" width="2.0202%" height="15" fill="rgb(244,222,10)" fg:x="95" fg:w="2"/><text x="96.2096%" y="191.50">s..</text></g><g><title>std::sys_common::net::TcpStream::connect (2 samples, 2.02%)</title><rect x="95.9596%" y="165" width="2.0202%" height="15" fill="rgb(236,179,52)" fg:x="95" fg:w="2"/><text x="96.2096%" y="175.50">s..</text></g><g><title>std::sys::pal::unix::net::Socket::new_raw (1 samples, 1.01%)</title><rect x="96.9697%" y="149" width="1.0101%" height="15" fill="rgb(213,23,39)" fg:x="96" fg:w="1"/><text x="97.2197%" y="159.50"></text></g><g><title>all (99 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(238,48,10)" fg:x="0" fg:w="99"/><text x="0.2500%" y="415.50"></text></g><g><title>8284256960 (15 samples, 15.15%)</title><rect x="84.8485%" y="389" width="15.1515%" height="15" fill="rgb(251,196,23)" fg:x="84" fg:w="15"/><text x="85.0985%" y="399.50">8284256960</text></g><g><title>_main (15 samples, 15.15%)</title><rect x="84.8485%" y="373" width="15.1515%" height="15" fill="rgb(250,152,24)" fg:x="84" fg:w="15"/><text x="85.0985%" y="383.50">_main</text></g><g><title>std::rt::lang_start_internal (15 samples, 15.15%)</title><rect x="84.8485%" y="357" width="15.1515%" height="15" fill="rgb(209,150,17)" fg:x="84" fg:w="15"/><text x="85.0985%" y="367.50">std::rt::lang_start_int..</text></g><g><title>std::rt::lang_start::{{closure}} (15 samples, 15.15%)</title><rect x="84.8485%" y="341" width="15.1515%" height="15" fill="rgb(234,202,34)" fg:x="84" fg:w="15"/><text x="85.0985%" y="351.50">std::rt::lang_start::{{..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (15 samples, 15.15%)</title><rect x="84.8485%" y="325" width="15.1515%" height="15" fill="rgb(253,148,53)" fg:x="84" fg:w="15"/><text x="85.0985%" y="335.50">std::sys::backtrace::__..</text></g><g><title>bench::main (15 samples, 15.15%)</title><rect x="84.8485%" y="309" width="15.1515%" height="15" fill="rgb(218,129,16)" fg:x="84" fg:w="15"/><text x="85.0985%" y="319.50">bench::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (15 samples, 15.15%)</title><rect x="84.8485%" y="293" width="15.1515%" height="15" fill="rgb(216,85,19)" fg:x="84" fg:w="15"/><text x="85.0985%" y="303.50">criterion::benchmark_gr..</text></g><g><title>criterion::analysis::common (15 samples, 15.15%)</title><rect x="84.8485%" y="277" width="15.1515%" height="15" fill="rgb(235,228,7)" fg:x="84" fg:w="15"/><text x="85.0985%" y="287.50">criterion::analysis::co..</text></g><g><title>criterion::routine::Routine::sample (15 samples, 15.15%)</title><rect x="84.8485%" y="261" width="15.1515%" height="15" fill="rgb(245,175,0)" fg:x="84" fg:w="15"/><text x="85.0985%" y="271.50">criterion::routine::Rou..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (15 samples, 15.15%)</title><rect x="84.8485%" y="245" width="15.1515%" height="15" fill="rgb(208,168,36)" fg:x="84" fg:w="15"/><text x="85.0985%" y="255.50">&lt;criterion::routine::Fu..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (15 samples, 15.15%)</title><rect x="84.8485%" y="229" width="15.1515%" height="15" fill="rgb(246,171,24)" fg:x="84" fg:w="15"/><text x="85.0985%" y="239.50">criterion::benchmark_gr..</text></g><g><title>kvs::client::KvClient::set (15 samples, 15.15%)</title><rect x="84.8485%" y="213" width="15.1515%" height="15" fill="rgb(215,142,24)" fg:x="84" fg:w="15"/><text x="85.0985%" y="223.50">kvs::client::KvClient::..</text></g><g><title>kvs::client::KvClient::send (15 samples, 15.15%)</title><rect x="84.8485%" y="197" width="15.1515%" height="15" fill="rgb(250,187,7)" fg:x="84" fg:w="15"/><text x="85.0985%" y="207.50">kvs::client::KvClient::..</text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 2.02%)</title><rect x="97.9798%" y="181" width="2.0202%" height="15" fill="rgb(228,66,33)" fg:x="97" fg:w="2"/><text x="98.2298%" y="191.50">t..</text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (2 samples, 2.02%)</title><rect x="97.9798%" y="165" width="2.0202%" height="15" fill="rgb(234,215,21)" fg:x="97" fg:w="2"/><text x="98.2298%" y="175.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 2.02%)</title><rect x="97.9798%" y="149" width="2.0202%" height="15" fill="rgb(222,191,20)" fg:x="97" fg:w="2"/><text x="98.2298%" y="159.50">s..</text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (2 samples, 2.02%)</title><rect x="97.9798%" y="133" width="2.0202%" height="15" fill="rgb(245,79,54)" fg:x="97" fg:w="2"/><text x="98.2298%" y="143.50">&lt;..</text></g></svg></svg>